import json
import os
from datetime import datetime, timedelta
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext, ConversationHandler

TOKEN = '7705891566:AAETdc4uIOJJXDeGPw9jKOiTy-A7SSjkasQ'  # –ë–æ—Ç —Ç–æ–∫–µ–Ω
ADMIN_ID = 7398183328  # –ê–¥–º–∏–Ω ID

DATA_FILE = "bot_data.json"

CHOOSING, LOCATION, PHONE, BROADCAST = range(4)

# üìÇ –î–µ—Ä–µ–∫—Ç–µ—Ä–¥—ñ –æ“õ—É
def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {"users": [], "orders": []}

# üíæ –î–µ—Ä–µ–∫—Ç–µ—Ä–¥—ñ —Å–∞“õ—Ç–∞—É
def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

# üìå –ë–æ—Ç –¥–µ—Ä–µ–∫—Ç–µ—Ä—ñ
bot_data = load_data()

# –ï—Å–∫—ñ —Ñ–æ—Ä–º–∞—Ç—Ç–∞“ì—ã user —Ç—ñ–∑—ñ–º—ñ–Ω –∂–∞“£–∞—Ä—Ç—É
for i, u in enumerate(bot_data["users"]):
    if isinstance(u, int):  # –µ—Å–∫—ñ —Ñ–æ—Ä–º–∞—Ç (—Ç–µ–∫ ID)
        bot_data["users"][i] = {
            "id": u,
            "date": datetime.now().strftime("%Y-%m-%d")
        }
save_data(bot_data)

def start(update: Update, context: CallbackContext):
    user = update.message.from_user
    user_id = user.id
    today = datetime.now().strftime("%Y-%m-%d")

    # –ñ–∞“£–∞ “õ–æ–ª–¥–∞–Ω—É—à—ã –±–æ–ª—Å–∞ ‚Äî —Ç—ñ–∑—ñ–º–≥–µ “õ–æ—Å–∞–º—ã–∑
    if not any(u["id"] == user_id for u in bot_data["users"]):
        bot_data["users"].append({"id": user_id, "date": today})
        save_data(bot_data)

        # –ê–¥–º–∏–Ω–≥–µ —Ö–∞–±–∞—Ä –∂—ñ–±–µ—Ä—É
        full_name = f"{user.first_name or ''} {user.last_name or ''}".strip()
        username = f"@{user.username}" if user.username else "(username –∂–æ“õ)"
        message = (
            f"üÜï –ñ–∞“£–∞ –ø–∞–π–¥–∞–ª–∞–Ω—ã—É—à—ã\n\n"
            f"üë§ –ê—Ç—ã: {full_name}\n"
            f"üÜî ID: {user_id}\n"
            f"üîó Username: {username}"
        )
        context.bot.send_message(chat_id=ADMIN_ID, text=message)

    # –ö–Ω–æ–ø–∫–∞–ª–∞—Ä
    buttons = [['–®–´–ú–ë–ê–ô ‚û°Ô∏è –ù”®–ö–Ü–°', '–ù”®–ö–Ü–° ‚û°Ô∏è –®–´–ú–ë–ê–ô']]
    if user_id == ADMIN_ID:
        buttons.append(['üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'üì¢ –•–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä—É'])

    update.message.reply_text(
        "üöñ –ê–°–°–ê–õ–ê–£–ú–ê ”ò–õ–ï–ô–ö–£–ú –•–û–® –ö–ï–õ–î–ò“¢–ò–ó!\n\n"
        "üìç –ë—ñ–∑ \n\n"
        "‚ÜóÔ∏è –®–´–ú–ë–ê–ô–î–ê–ù ‚û°Ô∏è –ù–£–ö–£–°–ì–ï \n\n"
        "‚ÜôÔ∏è –ù–£–ö–£–°–¢–ï–ù ‚¨ÖÔ∏è –®–´–ú–ë–ê–ô“í–ê \n\n"
        "üìç–º”ô–Ω–∑–∏–ª–¥–µ–Ω-–º”ô–Ω–∑–∏–ª–≥–µ —Ç–∞–∫—Å–∏ —Ö–∏–∑–º–µ—Ç–∏–Ω “±—Å—ã–Ω–∞–º—ã–∑!\n\n"
        "üì¶ –ê–º–∞–Ω–∞—Ç –ø–æ—á—Ç–∞–ª–∞—Ä—ã“£—ã–∑–¥—ã –º”ô–Ω–∑–∏–ª–∏“£–∏–∑–≥–µ –∂–µ—Ç–∫–µ—Ä–µ–º–∏–∑!\n ‚Ä¢–ë–ò–ó–î–ï –¢”®–ë–ï –ë–ê–ì–ê–ñ –•–ò–ó–ú–ï–¢–ò –ë–ê–† \n\n"
        "üìû +998770149797\nüìû+998770149797\n\n"
        "üë®‚Äçüíª@rakhim753\n\n"
        "–¢”®–ú–ï–ù–î–ï–ì–ò –ö–ù–û–ü–ö–ê–õ–ê–†–î–ê–ù –û–ó–ò“¢–ò–ó–ì–ï –ö–ï–†–ï–ö–õ–ò –ú”ò–ù–ó–ò–õ–î–ò –¢–ê“¢–õ–ê“¢üòä:",
        reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    )
    return CHOOSING

def choose_route(update: Update, context: CallbackContext):
    text = update.message.text

    if text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        return show_stats(update, context)

    if text == "üì¢ –•–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä—É" and update.message.from_user.id == ADMIN_ID:
        update.message.reply_text(
            "‚úçÔ∏è “ö–∞–Ω–¥–∞–π —Ö–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä–µ–º—ñ–∑? (—Ö–∞–±–∞—Ä–ª–∞–º–∞–Ω—ã –∂–∞–∑—ã“£):",
            reply_markup=ReplyKeyboardRemove()
        )
        return BROADCAST

    context.user_data['route'] = text
    location_button = [[KeyboardButton("üìç –õ–æ–∫–∞—Ü–∏—è –∂—ñ–±–µ—Ä—É", request_location=True)]]
    update.message.reply_text(
        "üìç –ò–ª—Ç–∏–º–∞—Å ”©–∑ –º”ô–Ω–∑–∏–ª–∏“£–∏–∑–¥–∏ –∫–Ω–æ–ø–∫–∞ –∞—Ä“õ–∞–ª—ã –∂–∏–±–µ—Ä–∏“£:",
        reply_markup=ReplyKeyboardMarkup(location_button, resize_keyboard=True)
    )
    return LOCATION

def get_location(update: Update, context: CallbackContext):
    location = update.message.location
    context.user_data['location'] = f"https://maps.google.com/?q={location.latitude},{location.longitude}"
    update.message.reply_text(
        "üìû –ï–Ω–¥—ñ —Ç–µ–ª–µ—Ñ–æ–Ω –Ω–æ–º–µ—Ä—ñ“£—ñ–∑–¥—ñ —Ö”ô–º –∞–¥–∞–º —Å–∞–Ω—ã–Ω –∂–∞–∑—ã“£ (–º—ã—Å–∞–ª—ã: +998901234567 2–ê–î–ê–ú):",
        reply_markup=ReplyKeyboardRemove()
    )
    return PHONE

def get_phone(update: Update, context: CallbackContext):
    phone = update.message.text
    route = context.user_data['route']
    location = context.user_data['location']

    message = f"üöñ –ñ–∞“£–∞ –±—É–π—ã—Ä—Ç–ø–∞:\n\nüõ£ –ú”ô–Ω–∑–∏–ª: {route}\nüìç –õ–æ–∫–∞—Ü–∏—è: {location}\nüìû –ù–æ–º–µ—Ä: {phone}"
    context.bot.send_message(chat_id=ADMIN_ID, text=message)

    bot_data["orders"].append({
        "route": route,
        "location": location,
        "phone": phone
    })
    save_data(bot_data)

    update.message.reply_text(
        "‚úÖ –ë–∏–∑–¥–∏ —Ç–∞“£–ª–∞“ì–∞–Ω—ã“£—ã–∑ —É—à—ã–Ω —Ä–∞—Ö–º–µ—Çüòä\n–ë–∞—Å –º–µ–Ω—é–≥–µ “õ–∞–π—Ç—ã—É “Ø—à—ñ–Ω /start –±–∞—Å—ã“£.",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

def show_stats(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    if user_id != ADMIN_ID:
        update.message.reply_text("‚ùå –ë“±–ª –±”©–ª—ñ–º —Ç–µ–∫ –∞–¥–º–∏–Ω–≥–µ –∞—Ä–Ω–∞–ª“ì–∞–Ω.")
        return CHOOSING

    order_count = len(bot_data["orders"])
    user_count = len(bot_data["users"])

    today = datetime.now().strftime("%Y-%m-%d")
    last_7_days = [(datetime.now() - timedelta(days=i)).strftime("%Y-%m-%d") for i in range(7)]

    today_users = sum(1 for u in bot_data["users"] if u["date"] == today)
    week_users = sum(1 for u in bot_data["users"] if u["date"] in last_7_days)

    text = f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n" \
           f"üë§ –ë–∞—Ä–ª—ã“õ –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã–ª–∞—Ä: {user_count}\n" \
           f"üì¶ –ë–∞—Ä–ª—ã“õ –±—É–π—ã—Ä—Ç–ø–∞–ª–∞—Ä: {order_count}\n" \
           f"üìÖ –ë“Ø–≥—ñ–Ω “õ–æ—Å—ã–ª“ì–∞–Ω–ª–∞—Ä: {today_users}\n" \
           f"üìÜ –°–æ“£“ì—ã 7 –∫“Ø–Ω–¥–µ “õ–æ—Å—ã–ª“ì–∞–Ω–ª–∞—Ä: {week_users}\n\n"

    last_orders = bot_data["orders"][-5:]
    for i, order in enumerate(last_orders, 1):
        text += (
            f"#{i}\n"
            f"üõ£ –ú”ô–Ω–∑–∏–ª: {order['route']}\n"
            f"üìç –õ–æ–∫–∞—Ü–∏—è: {order['location']}\n"
            f"üìû –ù–æ–º–µ—Ä: {order['phone']}\n\n"
        )

    update.message.reply_text(text, parse_mode='Markdown')
    return CHOOSING

def broadcast(update: Update, context: CallbackContext):
    if update.message.from_user.id != ADMIN_ID:
        return CHOOSING

    message = update.message.text
    success = 0
    for user in bot_data["users"]:
        try:
            context.bot.send_message(chat_id=user["id"], text=message)
            success += 1
        except:
            continue

    update.message.reply_text(f"üì¢ –•–∞–±–∞—Ä–ª–∞–º–∞ {success} –ø–∞–π–¥–∞–ª–∞–Ω—ã—É—à—ã“ì–∞ –∂—ñ–±–µ—Ä—ñ–ª–¥—ñ.")
    return CHOOSING

def cancel(update: Update, context: CallbackContext):
    update.message.reply_text("–ë–∏–π–∫–∞—Ä –µ—Ç–∏–ª–¥–∏.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

updater = Updater(TOKEN, use_context=True)
dp = updater.dispatcher

conv_handler = ConversationHandler(
    entry_points=[CommandHandler('start', start)],
    states={
        CHOOSING: [MessageHandler(Filters.text & ~Filters.command, choose_route)],
        LOCATION: [MessageHandler(Filters.location, get_location)],
        PHONE: [MessageHandler(Filters.text & ~Filters.command, get_phone)],
        BROADCAST: [MessageHandler(Filters.text & ~Filters.command, broadcast)],
    },
    fallbacks=[
        CommandHandler('cancel', cancel),
        CommandHandler('start', start)
    ]
)

dp.add_handler(conv_handler)
updater.start_polling()
updater.idle()